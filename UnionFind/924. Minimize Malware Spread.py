class Solution:  # union find
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)

        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    uf.union(i, j)

        freq = collections.defaultdict(int)
        for i in initial:
            root = uf.find(i)
            freq[root] += 1

        maxx = -1
        res = -1
        for i in initial:
            root = uf.find(i)
            if freq[root] == 1:
                count = uf.rank[root]
            else:
                count = 0
            if count > maxx or (count == maxx and i < res):
                res = i
                maxx = count

        return res


class UnionFind:
    def __init__(self, n):
        self.parent = {i: i for i in range(n)}
        self.rank = {i: 1 for i in range(n)}

    def find(self, i):
        if self.parent[i] != i:
            self.parent[i] = self.find(self.parent[i])
        return self.parent[i]

    def union(self, a, b):
        rootA, rootB = self.find(a), self.find(b)
        if rootA != rootB:
            self.parent[min(rootA, rootB)] = max(rootA, rootB)
            self.rank[max(rootA, rootB)] += self.rank[min(rootA, rootB)]

